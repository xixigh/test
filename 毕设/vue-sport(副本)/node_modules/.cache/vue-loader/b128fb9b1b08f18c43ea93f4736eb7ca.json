{"remainingRequest":"C:\\Java\\Java-Code\\healthy\\vue-healthy\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Java\\Java-Code\\healthy\\vue-healthy\\src\\views\\system\\role.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Java\\Java-Code\\healthy\\vue-healthy\\src\\views\\system\\role.vue","mtime":1624716091820},{"path":"C:\\Java\\Java-Code\\healthy\\vue-healthy\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Java\\Java-Code\\healthy\\vue-healthy\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Java\\Java-Code\\healthy\\vue-healthy\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}